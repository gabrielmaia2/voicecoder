NSC’s Digital Answering Machines Solution

Ohad Falik, GideonIntrater, National Semiconductor(I.C.) Ltd. P.O.Box 3007, Herzelia B. 46104,ISRAEL
Email :cohftt@tauxOl.nsc.com

Abstract
Digital Answering Machines @AMs) store messages in solid state memories instead of on magnetic tapes, thereby improving their reliability, and inmasing the number of featuresthey can suppart.Adigital signalpcesshgcapability that enables data compression, and the use of cost effective memories are fundamental to DAMs. National Semiconductmdeveloped a three chip cluster that is tuned to the DAM application. This DAM clusta based on the NS32AM160,offers a solution to both the required prcb cessingpowa,andsystemintegration.mspaperdescribes the requirements and structure of the DAM application. It identifies tasks in that appkation, and distriites them among the elements of a DAM system. Finally, it describes the integration of those elements in the NSC DAM solution, and describes NSC’s DAM cluster in detail.
Keywords: Consumer Electronics, Embedded Fkxxssors, DSP, Digital Answering Machines.
1.0 Introduction
TraditionalAnswering Machines (AMs) use two maptic tape recorders, one for incoming messages and the other for an outgoing message. These machines are unreliable, complicated and relatively expensive. A newer generation of AMs uses digital speech storage devices for the outgoing message. However, these AMs still have most of the reliability pblems caused by magnetic tape wear and mechanical malfunctionsbecausethey stillrequireone tape recotder [11. Qpically, &se AMs are limited to a few simple features such as play, erase,save all messages, remote conad operationsand memo recording.
Digital Answering Machines (DAMs) use digital solid state storage devices to hold both incoming and outgoing messages. The main issue when solid state memories are used is the volume of the data. Ihe standard bit rate for voice representation on digital telephone lines is 64 KbiWsec. Therefore, a one minute recording requires almost 4 Mbits of storage memory. The amount of memory required to store a few minutes of recorded raw data makes DAMs

iControl

IT1Control

Figure 1: Digital Answering Machine System Block Diagram
very expensive. First generation DAMS used improved sampling techniques like Adaptive Delta Modulation, which improved the bit rate (22 KbiWsec) but reduced voice quality. Newer DAMs use voice compression alge rithms to improve voice quality, and compress the data even further. This paper describes this type of DAMs and National Semiconductor’ssolution for efficient implementation of the DAM application.
Voice compression algorithms are Digital Signal Processing @SP) based methods for processing voice data and reducing its bit rate. Sophisticated algorithms may reduce the bit rate by a factor of 5 to 8, while preserving the quality of the voice. Voice compression algorithms and powerful DSP processors are fundamental to DAM systems. More processing power in the system makes it possible to add various features to the DAM. For example, it is very useful to know the time of arrival of a message. Voice Synthesis (VS)algorithmsmay be used to announcethe time of arrival of a message before message playback. Storing messages in random access memory makes it possible to add features such as selective erasing and playback of mes-

132 1063-6404/92 $3.00 0 1992IEEE

I

-

sages. Remote control of DAM functions is possible using touch-tone dialing (DTMFJ‘). A voice synthesized menu can guide the user to the desired control option.
The National Semiductor (NSC) DAM solution is implemented by a dvee chip cluster that uses the NS32AM160 processor as its base. It also includes a COdexDECOder (CODEC) and a DRAM. NSC’s NS32AM160 is an embedded processor that is tuned especially for the DAM application, but may be used for other applications as well. The p e s s o r handlessystem control, voice complession/decompression/synthesis, DTMF and memory managementfunctions;theCODEC performs A/D and D/A conversion; and the DRAM stores the messages.
Ssction 2.0 of this papex describes the structure of a typical DAM application. Section 3.0 analyzes NSC’s approach to a DAM solution. Section 4.0 describes the structure of the chip that resulted f”that analysis, and Section5.0 describes the NS32AM160 DSP engine.
2.0 DAM System Structure
A block diag” of a DAM system is shown in Figure 1. The COdedDECoder (CODEC) connects the analog and digital parts of the DAM. It converts analog voice signals to digital data,and vice versa. The CODECis controlled by the NS32AM160 proamor. An incoming message, arriving through the telqhone line, is connected to the CODEC input by the audio circuitsand line interface. The incoming message may also be concurrently directed to the speaker, so that it can be heard while it is recorded. Another path is used for the outgoing message. which is generated by the processor. After D/A conversion in the CODEC, the outgoing message is passed to the telephone line via the audio circuits and line interface. Other audio paths are also possible, for example from the microphone to the CODEC input to record outgoing messages.
Analog circuits switch the audio signal among the different audio s o m and destinations. The processor controls the path of the signal using analog switches activated by the output ports of the proassor. In addition, the analog cir-
cuits perform other tasks such as ring detection and gain
control.
Recorded messages are s t o d in memory. The volume of data that must be stored depends on the recording time required and the compression rate. For example, the amount of memory required for a seven minute recording, at a bit mte of 10 Kbits/sec, is about 4 Mbits. To store this volume of data economically on solid state memory
devices, DRAMs are used. Error tolerant voice compres-
sion algorithms enable the use of memory devices that lose some of the stored data. Audio quality DRAMs (ARAMs) are DRAMs that contain some defective memory locations.

(-CoE ntrol =--)
(m)
Figure 2 DAM software functions.
By using ARAMs with lower access speeds, the cost of memory is significantly reduced.
Interfacing with the user is another important task in the DAM application. DAM functions and operation modes are controlled locally via push-buttons and switches. Remote control of the DAM is performed via DTMF signaling through the telephone line. The status of the DAM and other information such as the number of recorded messages. are displayed on an LCD or LED display. Some information is presented orally using Voice Synthesis (VS), either for remote users or to simplify the local display.
The DAM application also includes software functions. Figure 2 shows two groups of tasks that are performed in the DAM application. DSP tasks include voice compression and decompression, VS and DTMF detection. These tasks usually involve massive computations, and their requirements should be carefully analyzed. System tasks include system control. memory management, Analog Front End (AFE) interface and AM sequence handling. System control includeshandling of the audio circuits,telephone line interface and human interface. The memory management task arranges messages in memory. The AFE interfa handles the CODEC read and write buffers and initialization. AM sequence handling accepts input such as line and key status, and activates the other functions accordingly.
For example, if the DAM is waiting for an incoming call, and the ring detector identifies a ring, the AM sequence handler will start the following sequence of events. A line connect command will be issued, and the outgoing message will be played. Simultaneously, DTMF detection will be activated to identify remote commands. After the outgoing message is finished playing, if no remote command was received, a tone generation command will be issued by the sequence handler to produce a beep. Then, the sequence handler will instruct the system control block to configure

I33

the system to record a message, and will activate the voice compression algorithm. When message recording is completed, the sequence handler willdisconnect the phone line, and return to the “waiting for an incoming call” state.
We analyzed this typical DAM system to design a highly intepted DAM solution that would include system control, voice compression/de”p.ession, message storage,
VS and human interface.

3.0 Defining the NSC DAM Cluster
The three chips in NSC’s DAM cluster were defined based on the application requirements described above, and using a special methodology for developing an application specific processor that is based on a general purpose microprocessor core. NSC’s three chip DAM cluster is illusrrated in Figure 3. A complete DAM solution also requires the definition of system integration logic, system features, and the application development environment, which are described in the next section.

PAO-7 PBO-7 pco-7

DATA BUS Do-
. 4a8 .-A
ms12

Al-1

PWM

m

WI I t

m
CCLK
Figure 3: National Semiconductor’sDigital Answering Machine Cluster
Methodology
An existing general purpose microprocessor (CPU core) is tailored to a specific application in two steps [2]. In the first, Performance Acceleration Modules (PAMs) are defined, in conjunction with the CPU core. PAMs are hardware modules designed to execute a set of specific functions faster than the CPU core. Integration of PAMs enhances the processing power of the CPU. This allows real-time execution of the application.
In the second step, System Integration Modules (SIMs) m
defined. SIMs are on-chip modules designed to replace

Figure 4: Structure of an Application Specific ptocessor.
external hardware such as timers, DRAM conaoller and Intenupt Control Unit. SIMs are traditionally part of the application’s board and are integrated on-chip to minimize the total system cost. Figure 4 illustrates the distribution of functions on an application specific lxocessor. In the DAM application, SIM definition included the distribution of functionsamong the thteechips in the cluster.
The CPU Core and the PAM
First we analyzed the DAM application and its time constraints. In the DAM application the performance critical
tasks are voice compression, voice decompression, voice generation and DTMF functions. It is important to note that
none of these voice functions is performed concurrently, but DTMF detection is concmnt with them all.
A voice compression/decompression algorithm was selected that compressesdata thatwas sampled at 64KbiW sec to about 13 KbiWsec, and has high error immunity. This algorithm uses fixed-point real arithmetic in its DSP functions. A DTMF algorithm was selected that uses fixedpoint complex arithmetic. VS computation requirements are relatively low when compared with the compression algorithm, and involve integer and fixed-point calculations.
In selecting a CPU core as the base for the new application specific processor, the NS32AM160, we looked for a low cost CPU core with medium range performance that would support the DSP and system tasks.We chose the CG m e [23], which consists of a 32-bit execution unit, an instruction prefetch queue and a bus interface unit. All these units operate concurrently to achieve an average of 1-2.5 MIPS at 10-25 Mhz. Floating-point instructions not used by the application were removed from the core, and interrupt latency was r e d u c e d by using direct exception [4].
Because of the vectorial nature of the DSP algorithms and the typical bus load of the CG core, we decided to use the DSP Module (DSPM) as the PAM [4]. The DSPM is capable of autonomous operation in parallel with CPU core operation. The DSPM executesprograms stared in an inter-

I34

nalon-chipRAM, and manipulatesdata storedeither in the intanalRAM or in an exmnaloff4lipmaary, To maximizeutilizetionof~~,theDSPMamtain~ apipelined DSP oriartad dampath, and acomol logic that i”cnEpa se4 ofDSP veuar commands.‘Ihe DSPM is desaibcd in detail in saction 5.0.
Memory

* I B N & CONT.

Thedetatypes used in the DAM are p”codc.p.0-
gram workinga I w fixed dataand voicedata. The program code d fixed dam tm placed in an onchip ROM. The pogramworking areais locatedinan onchipRAM,while I thevoice data is placed in 1111 ARAM device.

ARAM spec-

wae&fuledaccording to thealgo-

litlmfs amr immurity, and the ARAM’S aCce88 darsity.

Thisdcnsity depends 011 the mice compression rstio and

the ARAM word size. using the seltcted compression

algOrithm,rlbitw a d s can be accessedat3.3 K m a .

w . This allows use ofsbw ARAM devices without a d v d y

affecting

The Qbit wide bus makaq it possi-

ble 00 have4 Mbits of memory using only one &vice. ’Ihe

system may be configmd to have 1 to 32 Mbits of ARAM,

using 1 to %bit memay words, and ARAM devices with

addnssspaceof 1 to 4Mbit addresses.

CODEC
For the CODEC function,we neededa low cost single chip device that meets telephoneline standards. We selected the ”5512. which collsigtsof an 8-bit1-law coded ”lithic PCM COMBO that ptrform~both A/D and D/A c~(lvtt-
sion, and utilizes a parallel VO m i c q ” inlerfaCe[Sl.
It includes integrated filters for both input and output that meet telephone line srandards. A CODEC conve*6jon rate of 8 KHz covers the telephone line audio specm (300Hz to 3400 Hz).

4.0 NS32AM160 System Module Integration

- Icu c

PWM

1
FQum 5 NS32AM160 Block Diagram

ROM holds both code and amstant data, such as the Voice SynIbesis mxbuluy. Lasting both RAM and ROM interd y eliminates the need for external memories orher than
thew.

The NS32AM160 supports four vectored interrupts. The

Icu uses four intempt input pins to handle the non-Vec-

ured intempts IIccoFding to a fixed priority scheme. ”he

intermptsareassigned tocoDEcinttrfact(highestpior-

ity). extanal somw, DSPM 01500 Hz system clock (low-

est priority). Each mtanrpt source m y be masled

indepemhrly, this makes it possible to disable the extemal

intermpt soutce in case it is not required, andenabIes sup-

port Of intermpr nesting. Tbe DSPM in-

enables &-

cient pdld Opetation of the CG core and the DSPM.

System real-time funcriansand timekeeping are peaformed

in the system click intermp handler. Ihe 500 Hz pace is

determinedby scalingdowntheCPUmainclock.

Aftet we detemined the distribution of system functions

among the system components, we dew the

NS32AM160 SIM modules. To achieve maximal system

integxation, the SIMs should contain as much of the system

o, interface as possible. The NS32AM160 SIMs 8n the on-

chip memories, the Interrupt Control Unit

the clock

generator, the WATCHDOG (WD) timer, the Pulse Width

Modulator(PWhQ, the WportsandaBus@ter*rFaceUnit

(BIU) tailored f a the CODEC and ARAM (DRAMC)

interfaces. A block diagram of the NS32AM160 is shown
in Figtm 5 [a].

The NS32AM160 includes both RAM and ROM onchip. The 2.1 Kbyte on-chipRAM has two parts,one used by the CG core, and the odrer by the DSPM. The 25 Kbyte of

Thret types Of N~-MasknbltIn-

(NMIs)are used

for DSPM exceptionhadlingand theWATCHDOG mech-

anism. The DSPM ~ g e gNMI for debugging, for W-

points, and far deoectirtg illegal llcctss attempts by the core

during DSPM operation. The WAXHDOG mechanism

can be used toprevent thep”from losing control, and

toreactivate thecore duringpowerdown mode.

One of the most impatant tasksof theNS32Ah4160 is sys-

tem control.

pins ~ f ucsed for this plrpose. 16 of

these pins may be individually configured as input or out-

put, and 8 arededicaradoutputsignals. Ihe VO signals are

dehnedby the system con6jpmtion t o p e d m such tasks

as scanning push buttons, driving the display and control-

ling the analog switch.

I35

1

1111 ‘I

I ‘t

I

Another useful feature available in the NS32AM160 is a pulse Width Modulator (PWM). It may be utilized for low speed A/D and D/A conversions using an extemal resistorcapacitor network.

The clock generator generates all the clock signals required by the application, by scaling down the output from the 40.96 M H z crystal oscillator. During normal operation mode, the NS32AM160 operates on a 20.48 MHz clock. In order to allow bauery backup, the NS32AM160 has a powex down operation mode. To support this mode, the NS32AM160 has low frequency oscillator input (455 KHz), in addition to the narmal operation clock. The NS32AM160 is switched to power down mode by a software command. In power down mode the core clock is slowed, and some of the modules are stopped. The DRAM can not be accessed during power Qwn mode, but its content is presexved by continuing the refresh. Power consumption can be further reduced. by executing the pmcasor WAIT command. This causes the core to stop executing, and to wait for an interrupt, which is issued every 0.1 second by the WATCHDOG unit.

The DRAM controller block manages ARAM read,write and refresh bus transactions. BUSread and write tran~actions that require four cycles in the CG core are translated by the DRAM controller to ARAM bus cycles. Contention between core access and DRAM refresh cycles is resolved by stalling the core using its Kbp input The DRAM controller also decodes addresses. DRAM address mapping is fixed, and DRAM is accessed like a memory-mapped peripheral. Since ARAM holds only data, the data does not have to be in consecutive addresses. As a result, the external memory bus width can be configured without changing the DRAM controller.

The CODEC interface translates the CG bus cycles to

TP5512 transactions. It generates the special read and write

signals required after accessing the CODEC address. The

TP5512 requires two clock signals for the conversion cir-

cuits. These two clock signals are generated in the

(m) NS32AM160 by scaling its main clock down, without any

extemal component. One of these clocks

defines the

initiation and completion of the conversions. It is used

internally to interrupt the ICU,enabling efficient interface

to the CODEC.

The NS32AM160 has three configuration modes: internal
ROM, external ROM and development. The active configuration is selected during reset, by pull-uphull-down resistors.In intemal ROM mode, maximal system integration is achieved, by the three chip cluster described above in which both ROM and RAM are located on-chip. In extemal ROM mode an off-chip ROM device can be used to enable small production lines, and to provide more ROM than is available on-chip. In developmentmode, the NS32AM160

I
Figure 6: DSPM Block Diagram provides a flexible bus to the user's system, which enables
connection of off-chip RAM, ROM and other peripheral
devices to the NS32AM160. Development mode is used during the software develop ment phase, when off-chipRAM is loadedwith the application code. In this mode, the NS32AM160 provides hooks for connecting peripherals that are required in the development system, or for using the NS32AM160 in applications other than DAMS.
5.0 The DSP Module
The DSP Module (DSPM) is a complete processing unit, capable of autonomous operation, parallel to the CPU core operation. The DSPM executesprograms stored in intemal on-chip RAM, and manipulates data stored either in internal RAM ar in extemal off-chip memory. To maximize utilization of hardware resources, the DSPM contains a pipelined DSP-onented datapath with a hardware multiplier, and a control logic that implementsa set of DSP vector commands. The DSPM block diagram is illustrated in Figure 6. Computations are performed by vector commands. These commands employ the DSP-oriented datapath in a pipe-

lined manner, thereby maximizing the utilization of on-chip hardware resources. A set of dedicated registers is used to specify operands and options for subsequent vector commands. These dedicated registers can be loaded and stored by appropriate commands between initiations of vector commands. Additional commands are available for controlling the flow of execution of command lists (DSPM programs), for example, for programming loops and branches.
Internal RAM is used by the DSPM for fetching commands to be executed, and for reading or writing data that is required in the course of program execution. DSPM programs are encoded as command lists, and are interpretedby the command list execution unit.
The CPU coreinterfax maps the DSPM internal RAM as a contiguous block within theCPU core’saddress space. This makes it possible for normal CPU instructions to access and manipulate data and commands in the DSPM internal RAM. In addition, the CPU core interface contains control and status registers that are needed to synchronize the execution of CPU core instructions concurrently with execution of DSPM command lists.
Execution of a command list begins when the CPU core writes a value into the CLPTR control register. This causes the DSPM command list execution unit to begin executing commands, starting at the address written to the CLgTR register.
Once started, execution of the command list continues until a HALT command is executed. The CPU core can either poll the DSPM status register to detect the end of execution, or wait until the DSPM issues an intermpt upon termination of command list execution.
An example of one of the DSPM vector instructions is the Vector Complex Multiply and Accumulate (VCMAC) instruction. This vector operation performs an FIR filter on complex data. The VCMAC instruction performs a convolution sum of the X and Y complex vectors, and stores the
‘result in Z[Ol. complex X,YZ; complex-acc A ; ‘for (n&, n e LENGTH; n++ ) A= =A.= +(~[n].re*~[nl.r-e~[nl.im*~[n].im;) Aim = A h +(X[n].re*Y[nl.im + X[nl.im*Y[n].re) ; 1 Z[O]=(complex) A; 1
The execution unit of the DSPM consists of four independent unitsthat operate in a pipelined manner. The units can execute any of the following in parallel: one load or store o p t i o n , an address pointer increment operation, a multiply option and an ALU o p t i o n . Table 1 shows the DSPM pipeline during the execution of a VARiable Multi-

ply and Accumulate (VARMAC) instruction. This instruction performs repeated iterations of the following operation:

A = A + X[nl.low * Y[n].low + X[nl.high * Y[n].high

Cyc LordlStore Inc.
1 LadX[O]
2 Lad Y[OI x

MUL

~
ALU

3 L a d X [ l ] Y tempi=

X[Ol.low *Y[O].low

4 LaadYy[l] x tempz=

A += templ

X[O].iugh *Y[O].high

5

LadX[2]

Y tempi=

A += temp2

X[l]Jow *Y[l].low

6 LordY[2] X temp2=

A += templ

X[llhigb *Y[ll.high

TABLE 1. VARMAC pipeline execution

6.0 Summary
Digital Answering Machines (DAMS) provide more features and are more reliable than traditional answering machines. National Semiconductor’s solution for the DAM application, the NSC DAM three-chip cluster based on the NS32AM160, offersa highly integrated cost-effective solution to the DAM application.
To define the DAM cluster, we analyzed the requirements and structure of the application. We identified tasks in the application, distributed them among the elements of the system, and integrated thoseelements into the cluster components. This methodology used by National Semiconductor offers a constructive approach to embedded processor definition, and may be used in other applications as well.

References

T. Weaver. A digital-storage answering machine using

a national 32ooo-family micro-.

In 1991

Microprocessor Forum. San Francisco, CA, November

1991.

G. Interater and D. Biran. Application specific micro processors. In 1990 IEEE International Conference on Computer Design: VLSI in Computers and F%casors,
Cambridge, MA September 1990.

Embedded System Processors Databook. National Semiconductors,1989.
NS32CG160 Data Sheet. National Semiconductor, 1991.

TP5512 Data Sheet. National Semiconductor, 1991.

NS32AM160 Data Sheet. National Semiconductor, 1991.

137

